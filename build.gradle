plugins {
    id 'org.springframework.boot' version '2.0.3.RELEASE' apply false
    id "io.spring.dependency-management" version "1.0.7.RELEASE" apply false
    id "com.bmuschko.docker-remote-api" version "4.6.2" apply false
    id "org.sonarqube" version "2.7" apply false
}

group = 'io.github.gurv'
version = '0.1.0-SNAPSHOT'

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

ext {
    bomVersion = '0.1.0-SNAPSHOT'
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization", "gurv-github"
        property "sonar.projectVersion", "${project.version}"
        property "sonar.links.ci", "https://travis-ci.org/gurv/vg-examples"
        property "sonar.links.scm", "https://github.com/gurv/vg-examples"
        property "sonar.links.issue", "https://github.com/gurv/vg-examples/issues"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.bmuschko.docker-remote-api'
    apply plugin: 'maven-publish'

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
        mavenLocal()
        maven { url "https://oss.sonatype.org/service/local/repositories/snapshots/content/" }
    }

    sourceCompatibility = '1.8'

    ext {
        imageName = "gurv/${project.name}:latest"
    }

    bootJar {
        baseName = "${project.name}"
        version = rootProject.version
        excludeDevtools = true
    }

    springBoot {
        buildInfo()
    }

    bootRun {
        systemProperty 'spring.cloud.stream.kafka.binder.brokers', 'localhost:9092'
    }

    docker {
        registryCredentials {
            username = System.getenv('DOCKER_USERNAME')
            password = System.getenv('DOCKER_PASSWORD')
            email = 'vladimir.gurinovich@gmail.com'
        }
    }

    dependencyManagement {
        imports {
            mavenBom "io.github.gurv:vg-dependencies:${rootProject.bomVersion}"
        }
    }

    dependencies {
        implementation "org.springframework.boot:spring-boot-devtools"
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation 'io.micrometer:micrometer-registry-prometheus'
        implementation "org.codehaus.groovy:groovy-all"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    tasks.withType(Test) {
        systemProperties = [
                'spring.cloud.config.enabled': false,
        ]
    }

    task buildImage(type: DockerBuildImage) {
        dependsOn build
        dockerFile = file("src/main/docker/Dockerfile")
        inputDir = file(".")
        tags.add(project.imageName)
        buildArgs = [
                'VG_VERSION': version,
                'JAR_FILE': "build/libs/${project.name}-${rootProject.version}.jar",
        ]
    }

    task pushImage(type: DockerPushImage) {
        dependsOn buildImage
        imageName = project.imageName
    }

    publishing {
        publications {
            bootJava(MavenPublication) {
                artifact bootJar
                groupId = rootProject.group
                artifactId = "${project.name}"
                version = rootProject.version
                pom {
                    name = project.name
                    url = 'https://gurv.github.io/vg-doc/index.html'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'hhttp://www.opensource.org/licenses/mit-license.php'
                        }
                    }
                    developers {
                        developer {
                            id = 'gurv'
                            name = 'Vladimir Gurinovich'
                            email = 'vladimir.gurinovich@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/gurv/vg-examples.git'
                        developerConnection = 'scm:git:ssh://github.com/gurv/vg-examples.git'
                    }
                }
            }
            maven(MavenPublication) {
                from components.java
            }
        }
        
        repositories {
            maven {
                name = 'ci'
                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = rootProject.bomVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username System.env.CI_DEPLOY_USERNAME
                    password System.env.CI_DEPLOY_PASSWORD
                }
            }
        }
    }

    sonarqube {
        properties {
            property "sonar.sources", "${project.projectDir}/src"
            property "sonar.java.binaries", "${project.projectDir}/build/classes"
            property "sonar.java.libraries", "${project.projectDir}/build/libs/*.jar"
            property "sonar.exclusions", "${project.projectDir}/**/*Test*/**"
            property "sonar.test.inclusions", "${project.projectDir}/**/*Test*/**"
        }
    }

    rootProject.tasks.sonarqube.dependsOn build
}
